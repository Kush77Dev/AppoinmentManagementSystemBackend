// <auto-generated />
using System;
using AppointmentAPI_s.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentAPI_s.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250512043149_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentAPI_s.Models.AppointmentBooking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int>("TimeSlotID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("TimeSlotID");

                    b.HasIndex("UserID");

                    b.ToTable("AppointmentBookings");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.AppointmentWith", b =>
                {
                    b.Property<int>("AppointmentWithID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentWithID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentWithID");

                    b.ToTable("AppointmentWiths");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Appointments", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentWithID")
                        .HasColumnType("int");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByHRAdmin")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetingType")
                        .HasColumnType("int");

                    b.Property<int?>("ParentAppointmentID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentID");

                    b.HasIndex("AppointmentWithID");

                    b.HasIndex("CreatedByHRAdmin");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "SuperAdmin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "HRAdmin"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Timeslot", b =>
                {
                    b.Property<int>("TimeSlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSlotID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentWithID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("TimeFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeTo")
                        .HasColumnType("time");

                    b.HasKey("TimeSlotID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("AppointmentWithID");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.AppointmentBooking", b =>
                {
                    b.HasOne("AppointmentAPI_s.Models.Timeslot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentAPI_s.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TimeSlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Appointments", b =>
                {
                    b.HasOne("AppointmentAPI_s.Models.AppointmentWith", "AppointmentWith")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentWithID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentAPI_s.Models.Users", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByHRAdmin")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AppointmentWith");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Timeslot", b =>
                {
                    b.HasOne("AppointmentAPI_s.Models.Appointments", "Appointment")
                        .WithMany("Timeslots")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppointmentAPI_s.Models.AppointmentWith", "AppointmentWith")
                        .WithMany("Timeslots")
                        .HasForeignKey("AppointmentWithID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("AppointmentWith");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Users", b =>
                {
                    b.HasOne("AppointmentAPI_s.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.AppointmentWith", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("AppointmentAPI_s.Models.Appointments", b =>
                {
                    b.Navigation("Timeslots");
                });
#pragma warning restore 612, 618
        }
    }
}
